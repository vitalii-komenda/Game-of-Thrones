// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/vitalii-komenda/got/entities"
	"sync"
)

// Ensure, that CharactersRepositoryMock does implement entities.CharactersRepository.
// If this is not the case, regenerate this file with moq.
var _ entities.CharactersRepository = &CharactersRepositoryMock{}

// CharactersRepositoryMock is a mock implementation of entities.CharactersRepository.
//
//	func TestSomethingThatUsesCharactersRepository(t *testing.T) {
//
//		// make and configure a mocked entities.CharactersRepository
//		mockedCharactersRepository := &CharactersRepositoryMock{
//			CreateCharacterFunc: func(ctx context.Context, characterEntryEntry *entities.CharacterEntry, houseNames string) (int, error) {
//				panic("mock out the CreateCharacter method")
//			},
//			CreateCharacterAndActorFunc: func(ctx context.Context, characterEntry *entities.CharacterEntry) error {
//				panic("mock out the CreateCharacterAndActor method")
//			},
//			DeleteFunc: func(ctx context.Context, name string) error {
//				panic("mock out the Delete method")
//			},
//			GetFunc: func(ctx context.Context, name string) ([]entities.CharacterEntry, error) {
//				panic("mock out the Get method")
//			},
//			GetAllFunc: func(ctx context.Context, page int) ([]entities.CharacterEntry, error) {
//				panic("mock out the GetAll method")
//			},
//			GetCharacterIDFunc: func(ctx context.Context, characterName string) (int, error) {
//				panic("mock out the GetCharacterID method")
//			},
//			SearchFunc: func(ctx context.Context, term string) ([]entities.CharacterEntry, error) {
//				panic("mock out the Search method")
//			},
//			UpdateCharacterAndActorFunc: func(ctx context.Context, characterEntryEntry *entities.CharacterEntry, characterName string) (int, error) {
//				panic("mock out the UpdateCharacterAndActor method")
//			},
//		}
//
//		// use mockedCharactersRepository in code that requires entities.CharactersRepository
//		// and then make assertions.
//
//	}
type CharactersRepositoryMock struct {
	// CreateCharacterFunc mocks the CreateCharacter method.
	CreateCharacterFunc func(ctx context.Context, characterEntryEntry *entities.CharacterEntry, houseNames string) (int, error)

	// CreateCharacterAndActorFunc mocks the CreateCharacterAndActor method.
	CreateCharacterAndActorFunc func(ctx context.Context, characterEntry *entities.CharacterEntry) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, name string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, name string) ([]entities.CharacterEntry, error)

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, page int) ([]entities.CharacterEntry, error)

	// GetCharacterIDFunc mocks the GetCharacterID method.
	GetCharacterIDFunc func(ctx context.Context, characterName string) (int, error)

	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, term string) ([]entities.CharacterEntry, error)

	// UpdateCharacterAndActorFunc mocks the UpdateCharacterAndActor method.
	UpdateCharacterAndActorFunc func(ctx context.Context, characterEntryEntry *entities.CharacterEntry, characterName string) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCharacter holds details about calls to the CreateCharacter method.
		CreateCharacter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CharacterEntryEntry is the characterEntryEntry argument value.
			CharacterEntryEntry *entities.CharacterEntry
			// HouseNames is the houseNames argument value.
			HouseNames string
		}
		// CreateCharacterAndActor holds details about calls to the CreateCharacterAndActor method.
		CreateCharacterAndActor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CharacterEntry is the characterEntry argument value.
			CharacterEntry *entities.CharacterEntry
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Page is the page argument value.
			Page int
		}
		// GetCharacterID holds details about calls to the GetCharacterID method.
		GetCharacterID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CharacterName is the characterName argument value.
			CharacterName string
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Term is the term argument value.
			Term string
		}
		// UpdateCharacterAndActor holds details about calls to the UpdateCharacterAndActor method.
		UpdateCharacterAndActor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CharacterEntryEntry is the characterEntryEntry argument value.
			CharacterEntryEntry *entities.CharacterEntry
			// CharacterName is the characterName argument value.
			CharacterName string
		}
	}
	lockCreateCharacter         sync.RWMutex
	lockCreateCharacterAndActor sync.RWMutex
	lockDelete                  sync.RWMutex
	lockGet                     sync.RWMutex
	lockGetAll                  sync.RWMutex
	lockGetCharacterID          sync.RWMutex
	lockSearch                  sync.RWMutex
	lockUpdateCharacterAndActor sync.RWMutex
}

// CreateCharacter calls CreateCharacterFunc.
func (mock *CharactersRepositoryMock) CreateCharacter(ctx context.Context, characterEntryEntry *entities.CharacterEntry, houseNames string) (int, error) {
	if mock.CreateCharacterFunc == nil {
		panic("CharactersRepositoryMock.CreateCharacterFunc: method is nil but CharactersRepository.CreateCharacter was just called")
	}
	callInfo := struct {
		Ctx                 context.Context
		CharacterEntryEntry *entities.CharacterEntry
		HouseNames          string
	}{
		Ctx:                 ctx,
		CharacterEntryEntry: characterEntryEntry,
		HouseNames:          houseNames,
	}
	mock.lockCreateCharacter.Lock()
	mock.calls.CreateCharacter = append(mock.calls.CreateCharacter, callInfo)
	mock.lockCreateCharacter.Unlock()
	return mock.CreateCharacterFunc(ctx, characterEntryEntry, houseNames)
}

// CreateCharacterCalls gets all the calls that were made to CreateCharacter.
// Check the length with:
//
//	len(mockedCharactersRepository.CreateCharacterCalls())
func (mock *CharactersRepositoryMock) CreateCharacterCalls() []struct {
	Ctx                 context.Context
	CharacterEntryEntry *entities.CharacterEntry
	HouseNames          string
} {
	var calls []struct {
		Ctx                 context.Context
		CharacterEntryEntry *entities.CharacterEntry
		HouseNames          string
	}
	mock.lockCreateCharacter.RLock()
	calls = mock.calls.CreateCharacter
	mock.lockCreateCharacter.RUnlock()
	return calls
}

// CreateCharacterAndActor calls CreateCharacterAndActorFunc.
func (mock *CharactersRepositoryMock) CreateCharacterAndActor(ctx context.Context, characterEntry *entities.CharacterEntry) error {
	if mock.CreateCharacterAndActorFunc == nil {
		panic("CharactersRepositoryMock.CreateCharacterAndActorFunc: method is nil but CharactersRepository.CreateCharacterAndActor was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		CharacterEntry *entities.CharacterEntry
	}{
		Ctx:            ctx,
		CharacterEntry: characterEntry,
	}
	mock.lockCreateCharacterAndActor.Lock()
	mock.calls.CreateCharacterAndActor = append(mock.calls.CreateCharacterAndActor, callInfo)
	mock.lockCreateCharacterAndActor.Unlock()
	return mock.CreateCharacterAndActorFunc(ctx, characterEntry)
}

// CreateCharacterAndActorCalls gets all the calls that were made to CreateCharacterAndActor.
// Check the length with:
//
//	len(mockedCharactersRepository.CreateCharacterAndActorCalls())
func (mock *CharactersRepositoryMock) CreateCharacterAndActorCalls() []struct {
	Ctx            context.Context
	CharacterEntry *entities.CharacterEntry
} {
	var calls []struct {
		Ctx            context.Context
		CharacterEntry *entities.CharacterEntry
	}
	mock.lockCreateCharacterAndActor.RLock()
	calls = mock.calls.CreateCharacterAndActor
	mock.lockCreateCharacterAndActor.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CharactersRepositoryMock) Delete(ctx context.Context, name string) error {
	if mock.DeleteFunc == nil {
		panic("CharactersRepositoryMock.DeleteFunc: method is nil but CharactersRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, name)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedCharactersRepository.DeleteCalls())
func (mock *CharactersRepositoryMock) DeleteCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CharactersRepositoryMock) Get(ctx context.Context, name string) ([]entities.CharacterEntry, error) {
	if mock.GetFunc == nil {
		panic("CharactersRepositoryMock.GetFunc: method is nil but CharactersRepository.Get was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedCharactersRepository.GetCalls())
func (mock *CharactersRepositoryMock) GetCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *CharactersRepositoryMock) GetAll(ctx context.Context, page int) ([]entities.CharacterEntry, error) {
	if mock.GetAllFunc == nil {
		panic("CharactersRepositoryMock.GetAllFunc: method is nil but CharactersRepository.GetAll was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Page int
	}{
		Ctx:  ctx,
		Page: page,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx, page)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedCharactersRepository.GetAllCalls())
func (mock *CharactersRepositoryMock) GetAllCalls() []struct {
	Ctx  context.Context
	Page int
} {
	var calls []struct {
		Ctx  context.Context
		Page int
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// GetCharacterID calls GetCharacterIDFunc.
func (mock *CharactersRepositoryMock) GetCharacterID(ctx context.Context, characterName string) (int, error) {
	if mock.GetCharacterIDFunc == nil {
		panic("CharactersRepositoryMock.GetCharacterIDFunc: method is nil but CharactersRepository.GetCharacterID was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		CharacterName string
	}{
		Ctx:           ctx,
		CharacterName: characterName,
	}
	mock.lockGetCharacterID.Lock()
	mock.calls.GetCharacterID = append(mock.calls.GetCharacterID, callInfo)
	mock.lockGetCharacterID.Unlock()
	return mock.GetCharacterIDFunc(ctx, characterName)
}

// GetCharacterIDCalls gets all the calls that were made to GetCharacterID.
// Check the length with:
//
//	len(mockedCharactersRepository.GetCharacterIDCalls())
func (mock *CharactersRepositoryMock) GetCharacterIDCalls() []struct {
	Ctx           context.Context
	CharacterName string
} {
	var calls []struct {
		Ctx           context.Context
		CharacterName string
	}
	mock.lockGetCharacterID.RLock()
	calls = mock.calls.GetCharacterID
	mock.lockGetCharacterID.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *CharactersRepositoryMock) Search(ctx context.Context, term string) ([]entities.CharacterEntry, error) {
	if mock.SearchFunc == nil {
		panic("CharactersRepositoryMock.SearchFunc: method is nil but CharactersRepository.Search was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Term string
	}{
		Ctx:  ctx,
		Term: term,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	return mock.SearchFunc(ctx, term)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//
//	len(mockedCharactersRepository.SearchCalls())
func (mock *CharactersRepositoryMock) SearchCalls() []struct {
	Ctx  context.Context
	Term string
} {
	var calls []struct {
		Ctx  context.Context
		Term string
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}

// UpdateCharacterAndActor calls UpdateCharacterAndActorFunc.
func (mock *CharactersRepositoryMock) UpdateCharacterAndActor(ctx context.Context, characterEntryEntry *entities.CharacterEntry, characterName string) (int, error) {
	if mock.UpdateCharacterAndActorFunc == nil {
		panic("CharactersRepositoryMock.UpdateCharacterAndActorFunc: method is nil but CharactersRepository.UpdateCharacterAndActor was just called")
	}
	callInfo := struct {
		Ctx                 context.Context
		CharacterEntryEntry *entities.CharacterEntry
		CharacterName       string
	}{
		Ctx:                 ctx,
		CharacterEntryEntry: characterEntryEntry,
		CharacterName:       characterName,
	}
	mock.lockUpdateCharacterAndActor.Lock()
	mock.calls.UpdateCharacterAndActor = append(mock.calls.UpdateCharacterAndActor, callInfo)
	mock.lockUpdateCharacterAndActor.Unlock()
	return mock.UpdateCharacterAndActorFunc(ctx, characterEntryEntry, characterName)
}

// UpdateCharacterAndActorCalls gets all the calls that were made to UpdateCharacterAndActor.
// Check the length with:
//
//	len(mockedCharactersRepository.UpdateCharacterAndActorCalls())
func (mock *CharactersRepositoryMock) UpdateCharacterAndActorCalls() []struct {
	Ctx                 context.Context
	CharacterEntryEntry *entities.CharacterEntry
	CharacterName       string
} {
	var calls []struct {
		Ctx                 context.Context
		CharacterEntryEntry *entities.CharacterEntry
		CharacterName       string
	}
	mock.lockUpdateCharacterAndActor.RLock()
	calls = mock.calls.UpdateCharacterAndActor
	mock.lockUpdateCharacterAndActor.RUnlock()
	return calls
}
