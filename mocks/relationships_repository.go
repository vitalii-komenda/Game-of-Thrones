// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/vitalii-komenda/got/entities"
	"sync"
)

// Ensure, that RelationshipsRepositoryMock does implement entities.RelationshipsRepository.
// If this is not the case, regenerate this file with moq.
var _ entities.RelationshipsRepository = &RelationshipsRepositoryMock{}

// RelationshipsRepositoryMock is a mock implementation of entities.RelationshipsRepository.
//
//	func TestSomethingThatUsesRelationshipsRepository(t *testing.T) {
//
//		// make and configure a mocked entities.RelationshipsRepository
//		mockedRelationshipsRepository := &RelationshipsRepositoryMock{
//			AddAllFunc: func(ctx context.Context, character entities.CharacterEntry) error {
//				panic("mock out the AddAll method")
//			},
//			AddKilledFunc: func(ctx context.Context, characterID int, characterKilledId int) error {
//				panic("mock out the AddKilled method")
//			},
//			AddMarriedEngagedFunc: func(ctx context.Context, characterID int, characterMarriedEngagedId int) error {
//				panic("mock out the AddMarriedEngaged method")
//			},
//			AddParentFunc: func(ctx context.Context, characterID int, characterParentId int) error {
//				panic("mock out the AddParent method")
//			},
//			AddSiblingFunc: func(ctx context.Context, characterID int, characterSiblingId int) error {
//				panic("mock out the AddSibling method")
//			},
//			UpdateAllFunc: func(ctx context.Context, character entities.CharacterEntry) error {
//				panic("mock out the UpdateAll method")
//			},
//		}
//
//		// use mockedRelationshipsRepository in code that requires entities.RelationshipsRepository
//		// and then make assertions.
//
//	}
type RelationshipsRepositoryMock struct {
	// AddAllFunc mocks the AddAll method.
	AddAllFunc func(ctx context.Context, character entities.CharacterEntry) error

	// AddKilledFunc mocks the AddKilled method.
	AddKilledFunc func(ctx context.Context, characterID int, characterKilledId int) error

	// AddMarriedEngagedFunc mocks the AddMarriedEngaged method.
	AddMarriedEngagedFunc func(ctx context.Context, characterID int, characterMarriedEngagedId int) error

	// AddParentFunc mocks the AddParent method.
	AddParentFunc func(ctx context.Context, characterID int, characterParentId int) error

	// AddSiblingFunc mocks the AddSibling method.
	AddSiblingFunc func(ctx context.Context, characterID int, characterSiblingId int) error

	// UpdateAllFunc mocks the UpdateAll method.
	UpdateAllFunc func(ctx context.Context, character entities.CharacterEntry) error

	// calls tracks calls to the methods.
	calls struct {
		// AddAll holds details about calls to the AddAll method.
		AddAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Character is the character argument value.
			Character entities.CharacterEntry
		}
		// AddKilled holds details about calls to the AddKilled method.
		AddKilled []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CharacterID is the characterID argument value.
			CharacterID int
			// CharacterKilledId is the characterKilledId argument value.
			CharacterKilledId int
		}
		// AddMarriedEngaged holds details about calls to the AddMarriedEngaged method.
		AddMarriedEngaged []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CharacterID is the characterID argument value.
			CharacterID int
			// CharacterMarriedEngagedId is the characterMarriedEngagedId argument value.
			CharacterMarriedEngagedId int
		}
		// AddParent holds details about calls to the AddParent method.
		AddParent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CharacterID is the characterID argument value.
			CharacterID int
			// CharacterParentId is the characterParentId argument value.
			CharacterParentId int
		}
		// AddSibling holds details about calls to the AddSibling method.
		AddSibling []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CharacterID is the characterID argument value.
			CharacterID int
			// CharacterSiblingId is the characterSiblingId argument value.
			CharacterSiblingId int
		}
		// UpdateAll holds details about calls to the UpdateAll method.
		UpdateAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Character is the character argument value.
			Character entities.CharacterEntry
		}
	}
	lockAddAll            sync.RWMutex
	lockAddKilled         sync.RWMutex
	lockAddMarriedEngaged sync.RWMutex
	lockAddParent         sync.RWMutex
	lockAddSibling        sync.RWMutex
	lockUpdateAll         sync.RWMutex
}

// AddAll calls AddAllFunc.
func (mock *RelationshipsRepositoryMock) AddAll(ctx context.Context, character entities.CharacterEntry) error {
	if mock.AddAllFunc == nil {
		panic("RelationshipsRepositoryMock.AddAllFunc: method is nil but RelationshipsRepository.AddAll was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Character entities.CharacterEntry
	}{
		Ctx:       ctx,
		Character: character,
	}
	mock.lockAddAll.Lock()
	mock.calls.AddAll = append(mock.calls.AddAll, callInfo)
	mock.lockAddAll.Unlock()
	return mock.AddAllFunc(ctx, character)
}

// AddAllCalls gets all the calls that were made to AddAll.
// Check the length with:
//
//	len(mockedRelationshipsRepository.AddAllCalls())
func (mock *RelationshipsRepositoryMock) AddAllCalls() []struct {
	Ctx       context.Context
	Character entities.CharacterEntry
} {
	var calls []struct {
		Ctx       context.Context
		Character entities.CharacterEntry
	}
	mock.lockAddAll.RLock()
	calls = mock.calls.AddAll
	mock.lockAddAll.RUnlock()
	return calls
}

// AddKilled calls AddKilledFunc.
func (mock *RelationshipsRepositoryMock) AddKilled(ctx context.Context, characterID int, characterKilledId int) error {
	if mock.AddKilledFunc == nil {
		panic("RelationshipsRepositoryMock.AddKilledFunc: method is nil but RelationshipsRepository.AddKilled was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		CharacterID       int
		CharacterKilledId int
	}{
		Ctx:               ctx,
		CharacterID:       characterID,
		CharacterKilledId: characterKilledId,
	}
	mock.lockAddKilled.Lock()
	mock.calls.AddKilled = append(mock.calls.AddKilled, callInfo)
	mock.lockAddKilled.Unlock()
	return mock.AddKilledFunc(ctx, characterID, characterKilledId)
}

// AddKilledCalls gets all the calls that were made to AddKilled.
// Check the length with:
//
//	len(mockedRelationshipsRepository.AddKilledCalls())
func (mock *RelationshipsRepositoryMock) AddKilledCalls() []struct {
	Ctx               context.Context
	CharacterID       int
	CharacterKilledId int
} {
	var calls []struct {
		Ctx               context.Context
		CharacterID       int
		CharacterKilledId int
	}
	mock.lockAddKilled.RLock()
	calls = mock.calls.AddKilled
	mock.lockAddKilled.RUnlock()
	return calls
}

// AddMarriedEngaged calls AddMarriedEngagedFunc.
func (mock *RelationshipsRepositoryMock) AddMarriedEngaged(ctx context.Context, characterID int, characterMarriedEngagedId int) error {
	if mock.AddMarriedEngagedFunc == nil {
		panic("RelationshipsRepositoryMock.AddMarriedEngagedFunc: method is nil but RelationshipsRepository.AddMarriedEngaged was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		CharacterID               int
		CharacterMarriedEngagedId int
	}{
		Ctx:                       ctx,
		CharacterID:               characterID,
		CharacterMarriedEngagedId: characterMarriedEngagedId,
	}
	mock.lockAddMarriedEngaged.Lock()
	mock.calls.AddMarriedEngaged = append(mock.calls.AddMarriedEngaged, callInfo)
	mock.lockAddMarriedEngaged.Unlock()
	return mock.AddMarriedEngagedFunc(ctx, characterID, characterMarriedEngagedId)
}

// AddMarriedEngagedCalls gets all the calls that were made to AddMarriedEngaged.
// Check the length with:
//
//	len(mockedRelationshipsRepository.AddMarriedEngagedCalls())
func (mock *RelationshipsRepositoryMock) AddMarriedEngagedCalls() []struct {
	Ctx                       context.Context
	CharacterID               int
	CharacterMarriedEngagedId int
} {
	var calls []struct {
		Ctx                       context.Context
		CharacterID               int
		CharacterMarriedEngagedId int
	}
	mock.lockAddMarriedEngaged.RLock()
	calls = mock.calls.AddMarriedEngaged
	mock.lockAddMarriedEngaged.RUnlock()
	return calls
}

// AddParent calls AddParentFunc.
func (mock *RelationshipsRepositoryMock) AddParent(ctx context.Context, characterID int, characterParentId int) error {
	if mock.AddParentFunc == nil {
		panic("RelationshipsRepositoryMock.AddParentFunc: method is nil but RelationshipsRepository.AddParent was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		CharacterID       int
		CharacterParentId int
	}{
		Ctx:               ctx,
		CharacterID:       characterID,
		CharacterParentId: characterParentId,
	}
	mock.lockAddParent.Lock()
	mock.calls.AddParent = append(mock.calls.AddParent, callInfo)
	mock.lockAddParent.Unlock()
	return mock.AddParentFunc(ctx, characterID, characterParentId)
}

// AddParentCalls gets all the calls that were made to AddParent.
// Check the length with:
//
//	len(mockedRelationshipsRepository.AddParentCalls())
func (mock *RelationshipsRepositoryMock) AddParentCalls() []struct {
	Ctx               context.Context
	CharacterID       int
	CharacterParentId int
} {
	var calls []struct {
		Ctx               context.Context
		CharacterID       int
		CharacterParentId int
	}
	mock.lockAddParent.RLock()
	calls = mock.calls.AddParent
	mock.lockAddParent.RUnlock()
	return calls
}

// AddSibling calls AddSiblingFunc.
func (mock *RelationshipsRepositoryMock) AddSibling(ctx context.Context, characterID int, characterSiblingId int) error {
	if mock.AddSiblingFunc == nil {
		panic("RelationshipsRepositoryMock.AddSiblingFunc: method is nil but RelationshipsRepository.AddSibling was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		CharacterID        int
		CharacterSiblingId int
	}{
		Ctx:                ctx,
		CharacterID:        characterID,
		CharacterSiblingId: characterSiblingId,
	}
	mock.lockAddSibling.Lock()
	mock.calls.AddSibling = append(mock.calls.AddSibling, callInfo)
	mock.lockAddSibling.Unlock()
	return mock.AddSiblingFunc(ctx, characterID, characterSiblingId)
}

// AddSiblingCalls gets all the calls that were made to AddSibling.
// Check the length with:
//
//	len(mockedRelationshipsRepository.AddSiblingCalls())
func (mock *RelationshipsRepositoryMock) AddSiblingCalls() []struct {
	Ctx                context.Context
	CharacterID        int
	CharacterSiblingId int
} {
	var calls []struct {
		Ctx                context.Context
		CharacterID        int
		CharacterSiblingId int
	}
	mock.lockAddSibling.RLock()
	calls = mock.calls.AddSibling
	mock.lockAddSibling.RUnlock()
	return calls
}

// UpdateAll calls UpdateAllFunc.
func (mock *RelationshipsRepositoryMock) UpdateAll(ctx context.Context, character entities.CharacterEntry) error {
	if mock.UpdateAllFunc == nil {
		panic("RelationshipsRepositoryMock.UpdateAllFunc: method is nil but RelationshipsRepository.UpdateAll was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Character entities.CharacterEntry
	}{
		Ctx:       ctx,
		Character: character,
	}
	mock.lockUpdateAll.Lock()
	mock.calls.UpdateAll = append(mock.calls.UpdateAll, callInfo)
	mock.lockUpdateAll.Unlock()
	return mock.UpdateAllFunc(ctx, character)
}

// UpdateAllCalls gets all the calls that were made to UpdateAll.
// Check the length with:
//
//	len(mockedRelationshipsRepository.UpdateAllCalls())
func (mock *RelationshipsRepositoryMock) UpdateAllCalls() []struct {
	Ctx       context.Context
	Character entities.CharacterEntry
} {
	var calls []struct {
		Ctx       context.Context
		Character entities.CharacterEntry
	}
	mock.lockUpdateAll.RLock()
	calls = mock.calls.UpdateAll
	mock.lockUpdateAll.RUnlock()
	return calls
}
