input {
  jdbc {
    jdbc_connection_string => "jdbc:postgresql://db:5433/got"
    jdbc_user => "postgres"
    jdbc_password => "postgres"
    jdbc_driver_library => "/usr/share/logstash/postgresql-42.2.18.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    statement => "
SELECT
    c.character_id,
    c.character_name,
    string_to_array(c.house_name, '-') AS house_name,
    c.character_image_thumb,
    c.character_image_full,
    c.character_link,
    c.nickname,
    c.royal,
    COALESCE(a.actor_name, '') AS actor_name,
    COALESCE(a.actor_link, '') AS actor_link,
    COALESCE(array_remove(array_agg(DISTINCT CASE WHEN r.relationship_type = 'parent' THEN related_character.character_name END), NULL), '{}') AS parents,
    COALESCE(array_remove(array_agg(DISTINCT CASE WHEN r.relationship_type = 'sibling' THEN related_character.character_name END), NULL), '{}') AS siblings,
    COALESCE(array_remove(array_agg(DISTINCT CASE WHEN r.relationship_type = 'killed' THEN related_character.character_name END), NULL), '{}') AS killed,
    COALESCE(array_remove(array_agg(DISTINCT CASE WHEN r.relationship_type = 'killed_by' THEN related_character.character_name END), NULL), '{}') AS killed_by,
    COALESCE(array_remove(array_agg(DISTINCT CASE WHEN r.relationship_type = 'married_engaged' THEN related_character.character_name END), NULL), '{}') AS married_engaged
FROM
    characters AS c
    LEFT JOIN characters_actors AS ca ON c.character_id = ca.character_id
    LEFT JOIN actors AS a ON ca.actor_id = a.actor_id
    LEFT JOIN relationships AS r ON c.character_id = r.character_id
    LEFT JOIN characters AS related_character ON r.character_relationship_id = related_character.character_id
WHERE c.updated_at > to_timestamp(:sql_last_value)
GROUP BY
    c.character_id, a.actor_name, a.actor_link;  
    
"
    use_column_value => true
    tracking_column => "updated_at"
    last_run_metadata_path => "/usr/share/logstash/.logstash_jdbc_last_run"
    schedule => "* * * * *"  # This will run the query every minute
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "character_details"
    document_id => "%{character_id}"  # Assuming 'character_id' is a unique identifier in your table
  }
  stdout { codec => json_lines }
}
